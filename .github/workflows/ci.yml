name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  LEAN_VERSION: "4.7.0"
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
      - name: Lint Python code
        run: |
          flake8 python/ --max-line-length=88 --extend-ignore=E203,W503
          black --check python/
          isort --check-only python/
          mypy python/src/ --ignore-missing-imports

  build-lean:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Lean
        uses: leanprover/lean4-action@v1
        with:
          lean-version: ${{ env.LEAN_VERSION }}
      
      - name: Cache Lake build
        uses: actions/cache@v3
        with:
          path: lean/.lake/build
          key: lean-build-${{ hashFiles('lean/lakefile.lean', 'lean/lean-toolchain') }}
          restore-keys: lean-build-
      
      - name: Build Lean project
        run: |
          cd lean
          lake build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: lean-build
          path: lean/.lake/build

  test-lean:
    runs-on: ubuntu-latest
    needs: build-lean
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Lean
        uses: leanprover/lean4-action@v1
        with:
          lean-version: ${{ env.LEAN_VERSION }}
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: lean-build
          path: lean/.lake/build
      
      - name: Test Lean proofs
        run: |
          cd lean
          lean proofs/ExampleProof.lean
          lean proofs/MLProofs.lean
          lean proofs/Tests.lean

  test-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('bench/requirements.txt', 'python/requirements.txt') }}
          restore-keys: pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r bench/requirements.txt
          pip install -r python/requirements.txt
      
      - name: Test Python code
        run: |
          cd python
          pytest --maxfail=1 --disable-warnings -q --cov=src --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: python/coverage.xml

  benchmark:
    runs-on: ubuntu-latest
    needs: [build-lean, test-python]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -r bench/requirements.txt
      
      - name: Download Lean build
        uses: actions/download-artifact@v3
        with:
          name: lean-build
          path: lean/.lake/build
      
      - name: Run benchmarks
        run: |
          python bench/ci_benchmark.py
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: bench/results/

  integration:
    runs-on: ubuntu-latest
    needs: [build-lean, test-python]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -r bench/requirements.txt
      
      - name: Start Python server
        run: |
          cd python
          python src/server.py &
          sleep 5
      
      - name: Run integration tests
        run: |
          cd lean
          lean proofs/PythonIntegration.lean

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          pip install bandit safety
      
      - name: Run security scan
        run: |
          bandit -r python/src/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
